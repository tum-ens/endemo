Search.setIndex({"docnames": ["_autosummary/endemo2", "_autosummary/endemo2.execution", "_autosummary/endemo2.execution.endemo", "_autosummary/endemo2.execution.endemo.Endemo", "_autosummary/endemo2.execution.output", "_autosummary/endemo2.execution.output.FileGenerator", "_autosummary/endemo2.execution.output.generate_amount_prognosis_output", "_autosummary/endemo2.execution.output.generate_coefficient_output", "_autosummary/endemo2.execution.output.generate_demand_output", "_autosummary/endemo2.execution.output.generate_gdp_prognosis_output", "_autosummary/endemo2.execution.output.generate_population_prognosis_output", "_autosummary/endemo2.execution.output.generate_specific_consumption_output", "_autosummary/endemo2.execution.output.shortcut_coef_output", "_autosummary/endemo2.general", "_autosummary/endemo2.general.country", "_autosummary/endemo2.general.country.Country", "_autosummary/endemo2.general.country_containers", "_autosummary/endemo2.general.country_containers.NutsRegion", "_autosummary/endemo2.general.country_containers.Population", "_autosummary/endemo2.general.demand_containers", "_autosummary/endemo2.general.demand_containers.CA", "_autosummary/endemo2.general.demand_containers.Demand", "_autosummary/endemo2.general.demand_containers.DemandType", "_autosummary/endemo2.general.demand_containers.EH", "_autosummary/endemo2.general.demand_containers.Heat", "_autosummary/endemo2.general.demand_containers.HisProg", "_autosummary/endemo2.general.demand_containers.Interval", "_autosummary/endemo2.general.demand_containers.SC", "_autosummary/endemo2.industry", "_autosummary/endemo2.industry.products", "_autosummary/endemo2.industry.products.Product", "_autosummary/endemo2.industry.products.ProductPrimSec", "_autosummary/endemo2.industry.products.SpecificConsumptionData", "_autosummary/endemo2.input", "_autosummary/endemo2.input.control_parameters", "_autosummary/endemo2.input.control_parameters.ControlParameters", "_autosummary/endemo2.input.control_parameters.ForecastMethod", "_autosummary/endemo2.input.control_parameters.GeneralSettings", "_autosummary/endemo2.input.control_parameters.IndustrySettings", "_autosummary/endemo2.input.control_parameters.ProductSettings", "_autosummary/endemo2.input.input", "_autosummary/endemo2.input.input.FileReadingHelper", "_autosummary/endemo2.input.input.GeneralInput", "_autosummary/endemo2.input.input.IndustryInput", "_autosummary/endemo2.input.input.Input", "_autosummary/endemo2.input.input.PopulationInput", "_autosummary/endemo2.input.input.ProductInput", "_autosummary/endemo2.input.input.RestSectorInput", "_autosummary/endemo2.sectors", "_autosummary/endemo2.sectors.commercial_trade_services_sector", "_autosummary/endemo2.sectors.commercial_trade_services_sector.CommercialTradeServices", "_autosummary/endemo2.sectors.household_sector", "_autosummary/endemo2.sectors.household_sector.Household", "_autosummary/endemo2.sectors.industry_sector", "_autosummary/endemo2.sectors.industry_sector.Industry", "_autosummary/endemo2.sectors.sector", "_autosummary/endemo2.sectors.sector.Sector", "_autosummary/endemo2.sectors.sector.SectorIdentifier", "_autosummary/endemo2.sectors.transport_sector", "_autosummary/endemo2.sectors.transport_sector.Transport", "_autosummary/endemo2.utility", "_autosummary/endemo2.utility.prediction_models", "_autosummary/endemo2.utility.prediction_models.Coef", "_autosummary/endemo2.utility.prediction_models.Exp", "_autosummary/endemo2.utility.prediction_models.Lin", "_autosummary/endemo2.utility.prediction_models.PredictedTimeseries", "_autosummary/endemo2.utility.prediction_models.Quadr", "_autosummary/endemo2.utility.prediction_models.StartPoint", "_autosummary/endemo2.utility.prediction_models.TimeStepSequence", "_autosummary/endemo2.utility.prediction_models.Timeseries", "_autosummary/endemo2.utility.utility", "_autosummary/endemo2.utility.utility.combine_data_on_x", "_autosummary/endemo2.utility.utility.convert_table_to_filtered_data_series_per_country", "_autosummary/endemo2.utility.utility.cut_after_x", "_autosummary/endemo2.utility.utility.exp_change", "_autosummary/endemo2.utility.utility.filter_out_nan_and_inf", "_autosummary/endemo2.utility.utility.is_permissible_float", "_autosummary/endemo2.utility.utility.is_tuple_list_zero", "_autosummary/endemo2.utility.utility.is_zero", "_autosummary/endemo2.utility.utility.lin_prediction", "_autosummary/endemo2.utility.utility.linear_regression", "_autosummary/endemo2.utility.utility.map_data_y", "_autosummary/endemo2.utility.utility.plot_timeseries", "_autosummary/endemo2.utility.utility.quadr_prediction", "_autosummary/endemo2.utility.utility.quadratic_regression", "_autosummary/endemo2.utility.utility.quadratic_regression_delta", "_autosummary/endemo2.utility.utility.str_dict", "_autosummary/endemo2.utility.utility.zip_data_on_x_and_map", "_autosummary/endemo2.utility.utility.zip_on_x", "index"], "filenames": ["_autosummary\\endemo2.rst", "_autosummary\\endemo2.execution.rst", "_autosummary\\endemo2.execution.endemo.rst", "_autosummary\\endemo2.execution.endemo.Endemo.rst", "_autosummary\\endemo2.execution.output.rst", "_autosummary\\endemo2.execution.output.FileGenerator.rst", "_autosummary\\endemo2.execution.output.generate_amount_prognosis_output.rst", "_autosummary\\endemo2.execution.output.generate_coefficient_output.rst", "_autosummary\\endemo2.execution.output.generate_demand_output.rst", "_autosummary\\endemo2.execution.output.generate_gdp_prognosis_output.rst", "_autosummary\\endemo2.execution.output.generate_population_prognosis_output.rst", "_autosummary\\endemo2.execution.output.generate_specific_consumption_output.rst", "_autosummary\\endemo2.execution.output.shortcut_coef_output.rst", "_autosummary\\endemo2.general.rst", "_autosummary\\endemo2.general.country.rst", "_autosummary\\endemo2.general.country.Country.rst", "_autosummary\\endemo2.general.country_containers.rst", "_autosummary\\endemo2.general.country_containers.NutsRegion.rst", "_autosummary\\endemo2.general.country_containers.Population.rst", "_autosummary\\endemo2.general.demand_containers.rst", "_autosummary\\endemo2.general.demand_containers.CA.rst", "_autosummary\\endemo2.general.demand_containers.Demand.rst", "_autosummary\\endemo2.general.demand_containers.DemandType.rst", "_autosummary\\endemo2.general.demand_containers.EH.rst", "_autosummary\\endemo2.general.demand_containers.Heat.rst", "_autosummary\\endemo2.general.demand_containers.HisProg.rst", "_autosummary\\endemo2.general.demand_containers.Interval.rst", "_autosummary\\endemo2.general.demand_containers.SC.rst", "_autosummary\\endemo2.industry.rst", "_autosummary\\endemo2.industry.products.rst", "_autosummary\\endemo2.industry.products.Product.rst", "_autosummary\\endemo2.industry.products.ProductPrimSec.rst", "_autosummary\\endemo2.industry.products.SpecificConsumptionData.rst", "_autosummary\\endemo2.input.rst", "_autosummary\\endemo2.input.control_parameters.rst", "_autosummary\\endemo2.input.control_parameters.ControlParameters.rst", "_autosummary\\endemo2.input.control_parameters.ForecastMethod.rst", "_autosummary\\endemo2.input.control_parameters.GeneralSettings.rst", "_autosummary\\endemo2.input.control_parameters.IndustrySettings.rst", "_autosummary\\endemo2.input.control_parameters.ProductSettings.rst", "_autosummary\\endemo2.input.input.rst", "_autosummary\\endemo2.input.input.FileReadingHelper.rst", "_autosummary\\endemo2.input.input.GeneralInput.rst", "_autosummary\\endemo2.input.input.IndustryInput.rst", "_autosummary\\endemo2.input.input.Input.rst", "_autosummary\\endemo2.input.input.PopulationInput.rst", "_autosummary\\endemo2.input.input.ProductInput.rst", "_autosummary\\endemo2.input.input.RestSectorInput.rst", "_autosummary\\endemo2.sectors.rst", "_autosummary\\endemo2.sectors.commercial_trade_services_sector.rst", "_autosummary\\endemo2.sectors.commercial_trade_services_sector.CommercialTradeServices.rst", "_autosummary\\endemo2.sectors.household_sector.rst", "_autosummary\\endemo2.sectors.household_sector.Household.rst", "_autosummary\\endemo2.sectors.industry_sector.rst", "_autosummary\\endemo2.sectors.industry_sector.Industry.rst", "_autosummary\\endemo2.sectors.sector.rst", "_autosummary\\endemo2.sectors.sector.Sector.rst", "_autosummary\\endemo2.sectors.sector.SectorIdentifier.rst", "_autosummary\\endemo2.sectors.transport_sector.rst", "_autosummary\\endemo2.sectors.transport_sector.Transport.rst", "_autosummary\\endemo2.utility.rst", "_autosummary\\endemo2.utility.prediction_models.rst", "_autosummary\\endemo2.utility.prediction_models.Coef.rst", "_autosummary\\endemo2.utility.prediction_models.Exp.rst", "_autosummary\\endemo2.utility.prediction_models.Lin.rst", "_autosummary\\endemo2.utility.prediction_models.PredictedTimeseries.rst", "_autosummary\\endemo2.utility.prediction_models.Quadr.rst", "_autosummary\\endemo2.utility.prediction_models.StartPoint.rst", "_autosummary\\endemo2.utility.prediction_models.TimeStepSequence.rst", "_autosummary\\endemo2.utility.prediction_models.Timeseries.rst", "_autosummary\\endemo2.utility.utility.rst", "_autosummary\\endemo2.utility.utility.combine_data_on_x.rst", "_autosummary\\endemo2.utility.utility.convert_table_to_filtered_data_series_per_country.rst", "_autosummary\\endemo2.utility.utility.cut_after_x.rst", "_autosummary\\endemo2.utility.utility.exp_change.rst", "_autosummary\\endemo2.utility.utility.filter_out_nan_and_inf.rst", "_autosummary\\endemo2.utility.utility.is_permissible_float.rst", "_autosummary\\endemo2.utility.utility.is_tuple_list_zero.rst", "_autosummary\\endemo2.utility.utility.is_zero.rst", "_autosummary\\endemo2.utility.utility.lin_prediction.rst", "_autosummary\\endemo2.utility.utility.linear_regression.rst", "_autosummary\\endemo2.utility.utility.map_data_y.rst", "_autosummary\\endemo2.utility.utility.plot_timeseries.rst", "_autosummary\\endemo2.utility.utility.quadr_prediction.rst", "_autosummary\\endemo2.utility.utility.quadratic_regression.rst", "_autosummary\\endemo2.utility.utility.quadratic_regression_delta.rst", "_autosummary\\endemo2.utility.utility.str_dict.rst", "_autosummary\\endemo2.utility.utility.zip_data_on_x_and_map.rst", "_autosummary\\endemo2.utility.utility.zip_on_x.rst", "index.rst"], "titles": ["endemo2", "endemo2.execution", "endemo2.execution.endemo", "endemo2.execution.endemo.Endemo", "endemo2.execution.output", "endemo2.execution.output.FileGenerator", "endemo2.execution.output.generate_amount_prognosis_output", "endemo2.execution.output.generate_coefficient_output", "endemo2.execution.output.generate_demand_output", "endemo2.execution.output.generate_gdp_prognosis_output", "endemo2.execution.output.generate_population_prognosis_output", "endemo2.execution.output.generate_specific_consumption_output", "endemo2.execution.output.shortcut_coef_output", "endemo2.general", "endemo2.general.country", "endemo2.general.country.Country", "endemo2.general.country_containers", "endemo2.general.country_containers.NutsRegion", "endemo2.general.country_containers.Population", "endemo2.general.demand_containers", "endemo2.general.demand_containers.CA", "endemo2.general.demand_containers.Demand", "endemo2.general.demand_containers.DemandType", "endemo2.general.demand_containers.EH", "endemo2.general.demand_containers.Heat", "endemo2.general.demand_containers.HisProg", "endemo2.general.demand_containers.Interval", "endemo2.general.demand_containers.SC", "endemo2.industry", "endemo2.industry.products", "endemo2.industry.products.Product", "endemo2.industry.products.ProductPrimSec", "endemo2.industry.products.SpecificConsumptionData", "endemo2.input", "endemo2.input.control_parameters", "endemo2.input.control_parameters.ControlParameters", "endemo2.input.control_parameters.ForecastMethod", "endemo2.input.control_parameters.GeneralSettings", "endemo2.input.control_parameters.IndustrySettings", "endemo2.input.control_parameters.ProductSettings", "endemo2.input.input", "endemo2.input.input.FileReadingHelper", "endemo2.input.input.GeneralInput", "endemo2.input.input.IndustryInput", "endemo2.input.input.Input", "endemo2.input.input.PopulationInput", "endemo2.input.input.ProductInput", "endemo2.input.input.RestSectorInput", "endemo2.sectors", "endemo2.sectors.commercial_trade_services_sector", "endemo2.sectors.commercial_trade_services_sector.CommercialTradeServices", "endemo2.sectors.household_sector", "endemo2.sectors.household_sector.Household", "endemo2.sectors.industry_sector", "endemo2.sectors.industry_sector.Industry", "endemo2.sectors.sector", "endemo2.sectors.sector.Sector", "endemo2.sectors.sector.SectorIdentifier", "endemo2.sectors.transport_sector", "endemo2.sectors.transport_sector.Transport", "endemo2.utility", "endemo2.utility.prediction_models", "endemo2.utility.prediction_models.Coef", "endemo2.utility.prediction_models.Exp", "endemo2.utility.prediction_models.Lin", "endemo2.utility.prediction_models.PredictedTimeseries", "endemo2.utility.prediction_models.Quadr", "endemo2.utility.prediction_models.StartPoint", "endemo2.utility.prediction_models.TimeStepSequence", "endemo2.utility.prediction_models.Timeseries", "endemo2.utility.utility", "endemo2.utility.utility.combine_data_on_x", "endemo2.utility.utility.convert_table_to_filtered_data_series_per_country", "endemo2.utility.utility.cut_after_x", "endemo2.utility.utility.exp_change", "endemo2.utility.utility.filter_out_nan_and_inf", "endemo2.utility.utility.is_permissible_float", "endemo2.utility.utility.is_tuple_list_zero", "endemo2.utility.utility.is_zero", "endemo2.utility.utility.lin_prediction", "endemo2.utility.utility.linear_regression", "endemo2.utility.utility.map_data_y", "endemo2.utility.utility.plot_timeseries", "endemo2.utility.utility.quadr_prediction", "endemo2.utility.utility.quadratic_regression", "endemo2.utility.utility.quadratic_regression_delta", "endemo2.utility.utility.str_dict", "endemo2.utility.utility.zip_data_on_x_and_map", "endemo2.utility.utility.zip_on_x", "Welcome to My Toolbox"], "terms": {"thi": [1, 3, 13, 15, 17, 28, 30, 31, 32, 33, 34, 37, 41, 46, 48, 54, 60, 65, 68, 69, 88], "built": [], "html": [], "doc": [], "set": [21, 30, 34, 35, 37, 38, 41, 42, 43, 45], "us": [3, 5, 17, 18, 30, 31, 32, 37, 38, 43, 45, 46, 47, 54, 62, 65, 67, 68, 69, 71, 86], "new": [5, 20, 21, 23, 25, 26, 27, 30, 39, 63, 64, 66, 74], "option": [30, 82], "avail": [17, 30, 38, 46, 65, 68, 69], "ext": [], "from": [3, 15, 30, 32, 37, 38, 41, 42, 43, 44, 46, 54, 65, 68, 69, 72], "version": [21, 37], "3": [27, 68], "1": [20, 23, 25, 26, 27, 32, 39, 54, 63, 64, 66, 68, 74, 88], "can": [15, 30, 41, 60, 71, 76, 88], "now": [], "iter": [], "over": [15, 17, 54], "python": 86, "packag": [1, 13, 28, 33, 48, 60], "automat": [], "so": 15, "you": [], "longer": [], "have": 56, "hard": [], "code": [17, 42, 45], "all": [1, 3, 5, 13, 15, 17, 28, 30, 32, 33, 34, 42, 43, 44, 45, 46, 48, 54, 56, 60, 65, 68, 69, 75], "your": [], "modul": [0, 1, 13, 28, 33, 34, 48, 60], "name": [3, 5, 15, 30, 32, 37, 38, 41, 43, 46, 54], "integr": [], "3rd": [], "parti": [], "extens": [], "provid": [6, 7, 8, 9, 10, 11, 21, 41, 69], "function": [4, 41, 54, 70, 77, 79, 81, 83, 87, 88], "point": [47, 54, 62, 67, 68, 74], "top": [], "sourc": [3, 5, 6, 7, 8, 9, 10, 11, 12, 15, 17, 18, 21, 22, 24, 30, 31, 32, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 50, 52, 54, 56, 57, 59, 62, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88], "tree": [17, 18], "find": 17, "howev": [], "deepli": [], "nest": [], "For": [17, 30], "each": [30, 32, 35, 38, 42, 43, 45, 46, 54], "list": [17, 30, 37, 38, 41, 65, 68, 69, 71, 72, 73, 75, 77, 78, 87, 88], "attribut": [20, 21, 22, 23, 25, 26, 27, 30, 32, 36, 38, 39, 43, 44, 57, 63, 64, 66, 67], "class": [2, 3, 4, 5, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69], "except": 76, "summari": [], "tabl": [5, 30, 37, 38, 72], "entri": [5, 65, 68, 69, 71, 73, 75, 77, 88], "creat": [20, 21, 23, 25, 26, 27, 30, 32, 39, 63, 64, 66, 72, 88], "hyperlink": [], "page": [], "displai": [6, 7, 8, 9, 10, 11], "extract": [], "docstr": [], "my": [], "choic": [], "inherit": [], "public": [], "member": [3, 21], "special": [], "__call__": [], "other": 21, "ar": [5, 13, 17, 28, 31, 37, 38, 45, 68, 77, 78], "It": [15, 17, 35, 41, 45, 47, 54], "": 38, "also": [32, 78], "rel": 41, "easi": [], "jupyt": [], "notebook": [], "tutori": [], "style": [], "materi": [], "To": [], "see": [], "how": [43, 46], "configur": 30, "do": [], "start": [20, 23, 25, 26, 27, 39, 47, 54, 62, 63, 64, 66, 67, 68, 74], "github": [], "repo": [], "readm": [], "base": [3, 5, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 50, 52, 54, 56, 57, 59, 62, 63, 64, 65, 66, 67, 68, 69], "object": [3, 5, 15, 17, 18, 21, 24, 30, 31, 32, 35, 37, 38, 41, 42, 43, 44, 45, 46, 47, 54, 56, 62, 69], "i": [3, 6, 7, 8, 9, 10, 11, 15, 17, 18, 20, 21, 23, 25, 26, 27, 30, 32, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 54, 62, 63, 64, 65, 66, 68, 69, 71, 72, 73, 75, 76, 80, 84, 85, 87, 88], "instanc": [3, 6, 7, 8, 9, 10, 11, 20, 23, 25, 26, 27, 39, 63, 64, 66], "model": [3, 6, 7, 8, 9, 10, 11, 30, 34, 35, 37, 38, 46, 54], "here": 3, "we": [3, 32, 86], "control": 3, "what": [3, 56], "doe": [3, 17], "highest": 3, "level": [3, 18, 24, 30, 46, 47], "variabl": [3, 5, 15, 17, 18, 21, 24, 30, 31, 32, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 54, 62, 65, 68, 69], "input_manag": [3, 5, 15, 30, 32, 54], "input": [3, 5, 15, 30, 32, 54, 65, 88], "hold": [1, 3, 5, 13, 18, 28, 30, 32, 33, 35, 37, 44, 45, 46, 48, 54, 60, 69], "excel": [3, 5, 44, 54], "sheet": [3, 5, 35, 37, 38, 41, 43, 44, 45], "current": [3, 5, 30, 37, 38, 41, 69], "run": 3, "program": [1, 3], "countri": [3, 18, 30, 32, 37, 42, 45, 46, 54], "dict": [3, 5, 15, 17, 30, 32, 37, 38, 42, 43, 45, 46, 47, 54, 72, 86], "str": [3, 5, 15, 17, 21, 24, 30, 32, 37, 38, 41, 42, 43, 44, 45, 46, 47, 54, 76, 82], "access": [3, 15, 17, 43, 45, 46], "english": 3, "method": [3, 5, 15, 17, 18, 20, 21, 23, 24, 25, 26, 27, 30, 31, 32, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 50, 52, 54, 56, 59, 62, 63, 64, 65, 66, 67, 68, 69], "load_model": 3, "futur": [3, 69], "todo": [3, 31, 57, 85], "read_input": 3, "read": [3, 33, 37, 38, 41, 42, 43, 65], "file": [3, 5, 6, 7, 8, 9, 10, 11, 15, 33, 35, 37, 38, 41, 43, 44, 45, 54], "folder": [3, 41, 42, 43, 44], "store": [3, 43], "save_model": 3, "write_debug_output": 3, "write": [3, 5], "output": [3, 44, 88], "debug": [3, 6, 7, 8, 9, 10, 11], "necessari": 3, "result": [3, 54, 74, 79, 80, 83, 84, 85, 87], "write_output": 3, "filenam": 5, "A": [5, 21, 24, 30, 31, 32, 38, 41, 46, 47, 65, 68, 69, 72, 77, 88], "tool": 5, "more": [5, 57, 71, 86], "easili": [5, 22], "gener": [5, 6, 7, 8, 9, 10, 11, 35, 42, 44, 68, 88], "refer": [5, 32], "excel_writ": 5, "pd": [5, 37, 41, 45], "excelwrit": 5, "The": [5, 6, 7, 8, 9, 10, 11, 15, 17, 18, 21, 30, 31, 32, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 54, 56, 57, 62, 65, 68, 69, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87], "writer": 5, "current_sheet_nam": 5, "keep": 5, "track": 5, "add_entri": 5, "written": [5, 6, 7, 8, 9, 10, 11], "current_out_dict": 5, "ad": 5, "when": [5, 17, 30, 38, 41, 65, 68, 69], "convert": [5, 76, 86], "inform": [6, 7, 8, 9, 10, 11, 18, 30, 32, 37, 43, 44, 46, 69], "relat": [6, 7, 8, 9, 10, 11, 43], "product": [6, 8, 11, 38, 41, 43, 46, 54], "amount": [6, 17, 21, 24, 30, 32, 45, 46, 54], "paramet": [6, 7, 8, 9, 10, 11, 15, 17, 21, 30, 32, 35, 37, 38, 41, 42, 43, 45, 46, 54, 65, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88], "endemo": [6, 7, 8, 9, 10, 11], "which": [6, 7, 8, 9, 10, 11, 15, 17, 18, 30, 32, 41, 54, 65, 77, 80, 84, 85], "coeffici": [7, 30, 32, 62, 65, 68, 69, 79, 80, 83, 84, 85], "predict": [7, 15, 18, 30, 32, 37, 38, 54, 65, 68, 69], "within": [7, 32, 42, 54], "return": [7, 15, 17, 18, 20, 21, 23, 24, 25, 26, 27, 30, 32, 37, 39, 41, 46, 50, 52, 54, 63, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88], "type": [7, 15, 17, 18, 21, 22, 30, 32, 41, 44, 46, 50, 52, 54, 65, 67, 68, 69, 72, 82], "none": [7, 17, 21, 32, 41, 82], "demand": [8, 15, 22, 30, 32, 46, 47, 50, 52, 54], "gdp": [9, 15, 30, 42, 54], "popul": [10, 15, 17, 30, 38, 42, 45, 54], "specif": [11, 30, 32, 38, 43, 46], "consumpt": [11, 30, 32, 38, 43, 46], "fg": 12, "exp_coef": 12, "lin_coef": 12, "quadr_coef": 12, "connect": [15, 44], "sector": [13, 15, 28, 35, 37, 38, 43, 47], "data": [15, 17, 18, 30, 32, 35, 36, 38, 41, 42, 43, 44, 45, 46, 47, 54, 65, 68, 69, 73, 75, 80, 81, 84, 85, 87], "singl": 15, "complet": 15, "self": [15, 17, 20, 21, 23, 24, 25, 26, 27, 37, 39, 41, 46, 63, 64, 66], "contain": [15, 18, 21, 24, 31, 32, 34, 35, 37, 38, 42, 45, 46, 47, 56, 62, 65, 68, 69, 77, 78], "unit": 15, "manag": [15, 30, 32], "fill": [15, 17], "its": 15, "constructor": 15, "_name": [15, 30], "en": 15, "_abbrevi": 15, "possibl": 15, "abbrevi": [15, 42, 43, 45], "_popul": 15, "predictedtimeseri": [15, 18], "nutsregion": [15, 18], "import": 15, "timeseri": [15, 17, 18, 30, 32, 54, 65, 68, 82], "_gdp": 15, "timestepsequ": [15, 30, 54], "_sector": 15, "sectoridentifi": 15, "identifi": 15, "calculate_total_demand": [15, 54], "year": [15, 17, 18, 30, 32, 37, 38, 41, 47, 50, 52, 54, 69], "sum": [15, 17, 54], "int": [15, 17, 30, 37, 38, 41, 47, 54], "target": [15, 17, 30, 32, 54, 65, 68, 69], "should": [15, 17, 18, 21, 30, 32, 37, 38, 43, 46, 54, 65, 68, 69, 77, 80, 81, 84, 85, 87], "calcul": [15, 17, 30, 32, 37, 38, 46, 47, 50, 52, 54, 62, 68, 74, 79, 80, 83, 84, 85], "get_gdp": 15, "getter": [15, 17, 18, 30, 32, 41, 54, 65, 68, 69], "get_nam": 15, "get_nuts2_root": [15, 18], "root": [15, 18], "get_popul": 15, "get_sector": 15, "sector_id": 15, "enum": [15, 22, 36, 38, 57, 67], "valu": [15, 20, 21, 22, 23, 25, 26, 27, 32, 36, 37, 39, 46, 57, 63, 64, 65, 66, 67, 68, 69, 72, 73, 75, 86, 88], "correspond": [15, 65, 68, 69, 72], "id": 15, "region_nam": 17, "historical_data": [17, 65, 68], "prediction_data": [17, 65], "repres": [17, 48, 54], "one": [17, 32, 54, 65, 75, 87, 88], "nut": 17, "region": [17, 18, 30, 37, 42, 45, 46, 54], "accord": [17, 21, 30, 54, 73, 79, 83], "individu": 17, "build": 17, "structur": [17, 46, 47], "includ": [17, 32, 45, 54], "sub": 17, "child": 17, "node": [17, 18], "leaf": 17, "nuts2": [17, 18, 30, 37, 42, 45, 46, 54], "tag": 17, "exampl": [17, 30, 32, 46, 54, 69], "de": 17, "de1": 17, "de11": 17, "_subregion": 17, "per": [17, 18, 30, 32, 37, 38, 45, 46], "de2": 17, "_ts_popul": 17, "onli": [17, 28, 37, 38, 77, 78], "_population_histor": 17, "float": [17, 18, 21, 24, 30, 38, 42, 45, 46, 47, 54, 65, 68, 69, 76, 78, 87], "histor": [17, 18, 25, 30, 32, 36, 38, 41, 43, 45, 46, 65, 68, 69], "add_child_region": 17, "nuts2region_obj": 17, "travers": 17, "recurs": 17, "insert": 17, "get_all_leaf_nod": 17, "get": [17, 21, 30, 32, 41, 65, 68, 69], "order": 17, "get_historical_data": 17, "subregion": 17, "get_nod": 17, "region_cod": 17, "get_nodes_df": 17, "depth": 17, "first": [17, 20, 23, 25, 26, 27, 39, 63, 64, 66, 71, 72, 73], "search": 17, "df": [17, 41, 72], "get_pop": 17, "certain": [17, 30, 43, 46, 54, 65, 68, 69], "els": [17, 76], "prognosi": [17, 18, 25, 30, 38, 45, 65, 68, 69], "get_pop_his_year": 17, "record": 17, "get_pop_perc_of_subregion_in_year": 17, "region_obj": 17, "percentag": [17, 30, 54], "proport": 17, "given": [17, 30, 32, 35, 37, 38, 54, 68, 69, 79, 81, 83, 87], "denot": [17, 43, 67], "100": [17, 46], "make": [17, 37], "up": 17, "get_pop_prog": 17, "done": [17, 41], "get_region_nam": 17, "country_level_popul": 18, "nuts2_us": 18, "fals": [18, 38, 76, 78, 80, 84, 85], "about": [18, 69], "well": 18, "bool": [18, 30, 32, 37, 38, 54], "decid": [18, 38], "get_country_historical_data": 18, "get_country_prog": 18, "get_data": [18, 65, 68, 69], "whether": [18, 30, 32, 37, 38, 46, 80, 84, 85], "true": [18, 30, 54, 71, 76, 77, 78], "otherwis": [18, 54, 78], "get_nuts2_prog": 18, "get_prog": [18, 65, 68, 69], "alpha2": [20, 42], "alpha3": [20, 42], "german_nam": [20, 42], "tupl": [20, 23, 25, 26, 27, 30, 39, 63, 64, 66, 71, 73, 75, 77], "__add__": [20, 23, 25, 26, 27, 39, 63, 64, 66], "__mul__": [20, 23, 25, 26, 27, 39, 63, 64, 66], "alia": [20, 23, 25, 26, 27, 39, 63, 64, 66], "field": [20, 23, 25, 26, 27, 39, 63, 64, 66], "number": [20, 23, 25, 26, 27, 39, 63, 64, 66], "0": [20, 21, 23, 24, 25, 26, 27, 32, 39, 54, 63, 64, 65, 66, 68, 69], "count": [20, 23, 25, 26, 27, 39, 63, 64, 66], "occurr": [20, 23, 25, 26, 27, 39, 63, 64, 66], "2": [20, 27, 39, 62, 63, 66, 68, 83, 88], "index": [20, 23, 25, 26, 27, 39, 41, 63, 64, 66], "stop": [20, 23, 25, 26, 27, 39, 63, 64, 66], "9223372036854775807": [20, 23, 25, 26, 27, 39, 63, 64, 66], "rais": [20, 23, 25, 26, 27, 39, 63, 64, 66], "valueerror": [20, 23, 25, 26, 27, 39, 63, 64, 66], "present": [20, 23, 25, 26, 27, 30, 39, 63, 64, 66, 78], "electr": [21, 23, 27, 30, 32, 42], "heat": [21, 23, 27, 30, 42, 46, 47], "hydrogen": [21, 27, 30], "split": [21, 24, 30, 31, 35, 54], "differ": [21, 30, 32, 47, 56, 60, 62, 69, 82], "categori": 21, "arithmet": [21, 24], "oper": [21, 24, 32, 41], "add": [21, 57], "compon": [21, 81], "wise": [21, 81], "own": 21, "copy_scal": 21, "scalar": [21, 32, 46], "scale": [21, 32], "dt": 21, "demandtyp": [21, 32, 47, 54], "ani": 21, "differenti": 22, "q1": [24, 30], "q2": [24, 30], "q3": [24, 30], "q4": [24, 30], "offer": 24, "end": 26, "max_subst_h2": 27, "product_nam": [30, 32, 38, 46, 54], "product_input": [30, 32], "country_nam": [30, 32, 45, 46, 47, 54], "belong": [30, 32, 54], "steel_prim": [30, 46, 54], "productinput": [30, 32, 43], "redund": [30, 32], "whose": [30, 54, 73], "capita": [30, 38], "_country_nam": 30, "_specific_consumpt": 30, "specificconsumptiondata": 30, "_bat": 30, "eh": [30, 32, 46], "best": [30, 46], "technologi": [30, 46], "_perc_us": 30, "replac": [30, 46], "old": [30, 46], "ones": [30, 46], "_exp_change_r": 30, "manual": [30, 45, 65, 68, 69], "chang": [30, 46, 65, 68, 69], "rate": [30, 38, 45, 46, 54, 62, 65, 68, 69], "exponenti": [30, 36, 46, 62, 65, 67, 68, 69, 74], "forecast": [30, 36, 38, 54, 62, 65, 67, 68, 69], "_heat_level": 30, "fix": [30, 41], "_amount_per_year": 30, "x": [30, 62, 65, 68, 69, 73, 76, 78, 79, 81, 82, 83, 87], "axi": [30, 65, 68, 69, 73, 81, 82, 87], "time": [30, 38], "_amount_per_gdp": 30, "_amount_per_capita_per_year": 30, "_amount_per_capita_per_gdp": 30, "_use_per_capita": 30, "indic": [30, 32, 35, 36, 37, 46, 54, 71, 73, 80, 84, 85], "_use_gdp_as_x": 30, "_empti": 30, "empti": [30, 78], "being": [30, 60, 73, 77], "filter": [30, 41, 45, 75], "caus": 30, "_nuts2_installed_capac": 30, "instal": [30, 46], "capac": [30, 46, 54], "calculate_demand": 30, "zero": [30, 54, 77, 78], "d": [30, 71, 88], "y": [30, 54, 65, 68, 69, 81, 82], "twh": [30, 54], "t": [30, 82], "p": 30, "c_": 30, "heat_": 30, "get_active_timeseri": 30, "regard": [30, 47], "per_capita": 30, "get_amount_prog": 30, "estim": [30, 69], "get_coef": [30, 32, 65, 68, 69], "coef": [30, 32, 65, 68, 69, 79, 83], "get_nuts2_installed_capac": 30, "dictionari": [30, 32, 37, 54, 72, 86], "get_specific_consumpt": 30, "get_timeseries_amount_per_capita_per_gdp": 30, "get_timeseries_amount_per_capita_per_year": 30, "get_timeseries_amount_per_gdp": 30, "get_timeseries_amount_per_year": 30, "is_empti": 30, "is_per_capita": 30, "is_per_gdp": 30, "split_heat_level": 30, "take": 30, "prim": 31, "sec": 31, "total": [31, 54], "primari": 31, "secondari": 31, "_primari": 31, "_secondari": 31, "_total": 31, "merg": 31, "actual": [1, 31], "somewher": 31, "product_amount_per_year": 32, "an": [32, 68, 76], "need": 32, "prevent": 32, "circular": 32, "depend": [32, 41], "default_specific_consumpt": 32, "sc": [32, 46], "default": [32, 46], "ts_his_specific_consumpt": 32, "energi": [32, 42], "carrier": [32, 42], "vari": 32, "effici": [32, 42, 71], "percent": 32, "_product_amount_per_year": 32, "taken": 32, "_calculate_sc": 32, "county_nam": 32, "want": 32, "know": 32, "get__calculate_sc": 32, "__calculate_sc": 32, "demand_typ": [32, 47], "specifi": [32, 43, 54], "param": 32, "rtype": [32, 65, 68, 69], "get_scal": 32, "while": [32, 38], "appli": [32, 77, 80, 81, 84, 85, 87, 88], "represent": [34, 38, 86], "found": 34, "set_and_control_paramet": [34, 35, 37, 38, 42, 44, 45, 54], "xlsx": [34, 35, 37, 38, 42, 44, 45, 54], "general_set": 35, "industry_set": [35, 43], "non": 35, "overlap": 35, "our": 35, "generalset": 35, "industryset": [35, 43], "ind_": 35, "prefer": 36, "wai": 36, "extrapol": 36, "linear": [36, 65, 68, 69, 79, 80, 84, 85], "util": 36, "regress": [36, 80, 84, 85], "quadrat": [36, 65, 68, 69, 83, 84], "growth": [36, 38, 45, 54, 62, 68, 74], "ex_gener": [37, 38], "ex_countri": 37, "datafram": [37, 41, 45, 72], "_sectors_active_valu": 37, "activ": [37, 38, 39, 43], "_parameter_valu": 37, "parameter_str": 37, "target_year": [37, 54], "recognized_countri": 37, "active_countri": 37, "perform": [37, 38], "nuts2_vers": 37, "either": [37, 75], "2016": 37, "2021": 37, "get_active_sector": 37, "get_paramet": 37, "meaning": 37, "error": 37, "messag": 37, "ex_subsector": 38, "ind_gener": 38, "ind_subsector": 38, "forecast_map": 38, "forecastmethod": [38, 65, 68, 69], "map": [38, 81], "string": [38, 76, 86], "intern": 38, "forecast_method": 38, "select": [38, 42, 65, 68, 69], "time_trend_model_activation_quadrat": 38, "If": [38, 46, 54, 71], "trend": 38, "deactiv": 38, "tradit": 38, "approach": 38, "production_quantity_calc_per_capita": 38, "quantiti": 38, "project": [38, 44, 46, 69], "trend_calc_for_spec": 38, "nuts2_distribution_based_on_installed_ind_capac": 38, "distribut": [38, 46, 54], "densiti": [38, 54], "skip_year": [38, 41], "skip": [38, 41], "remov": 38, "outlier": 38, "last_available_year": 38, "last": [38, 65, 68, 69], "exclus": 38, "product_set": 38, "productset": 38, "Of": 38, "form": [38, 44, 45, 68, 81, 86, 87, 88], "product_settings_obj": 38, "active_product_nam": 38, "rest_sector_growth_r": 38, "rest": [38, 43, 47, 54], "manual_exp_change_r": [39, 46], "perc_us": [39, 46], "file_nam": 41, "sheet_nam": 41, "skip_row": 41, "sheet_transform": 41, "helper": [41, 88], "some": [41, 89], "transform": 41, "path": [41, 42, 43, 44], "These": 41, "row": [41, 72], "numer": 41, "lambda": [41, 81, 87], "where": [41, 65, 68, 71, 73, 75, 77, 88], "after": [41, 88], "construct": 41, "previou": 41, "call": [41, 54], "set_path_and_read": 41, "li": 41, "ctrl": [42, 44, 45], "controlparamet": [42, 44, 45], "pars": [42, 43, 45], "populationdata": 42, "hisprog": [42, 45], "interv": [42, 45, 54, 68], "nuts2_valid_region": [42, 45], "valid": 42, "industry_path": [43, 44], "industri": [43, 44], "active_product": 43, "product_data_access": 43, "retriev": 43, "sc_historical_data_file_nam": 43, "sc_historical_sheet_nam": 43, "rest_sector_input": 43, "restsectorinput": 43, "csv": 44, "super_path": 44, "input_path": 44, "output_path": 44, "general_path": 44, "receiv": 44, "general_input": 44, "generalinput": 44, "industry_input": 44, "industryinput": 44, "df_country_pop_hi": 45, "df_country_pop_prog": 45, "df_nuts2_pop_hi": 45, "df_nuts2_pop_prog": 45, "That": 45, "recogn": 45, "thei": 45, "histori": 45, "country_popul": [45, 54], "whole": [45, 72, 88], "nuts2_popul": 45, "bat": 46, "prod": 46, "sc_h": 46, "sc_h_activ": 46, "heat_level": 46, "nuts2_installed_capac": 46, "summar": 46, "specific_consumption_default": 46, "specific_consumption_histor": 46, "across": [13, 46], "modern": 46, "nuts2_region_nam": 46, "capacity_valu": 46, "df_rest_calc": 47, "dict_heat_level": 47, "rest_calc_data": [47, 54], "ha": [47, 87], "follow": 47, "rest_sector_perc": 47, "demand_2018": 47, "rest_calc_basis_year": [47, 54], "rest_sector_heat_level": 47, "separ": 47, "calculate_forecasted_demand": [50, 52, 54], "Not": [50, 52], "implement": [50, 52, 85, 86], "yet": [50, 52], "commerci": 50, "trade": 50, "servic": 50, "country_gdp": 54, "produc": 54, "locat": 54, "_product": 54, "rest_growth_r": 54, "nuts2_distribution_by_installed_capac": 54, "installed_capac": 54, "calculate_demand_split_by_nuts2": 54, "calculate_product_demand": 54, "nuts2_region": 54, "calculate_forecasted_demand_split_by_nuts2": 54, "calculate_rest_demand_split_by_nuts2": 54, "calculate_rest_sector_demand": 54, "rest_": 54, "text": [54, 68], "start_year": 54, "perc_": 54, "demand_": 54, "r": [54, 62, 63, 74], "calculate_total_demand_split_by_nuts2": 54, "get_product": 54, "match": [54, 71], "prog_product_amount": 54, "parent": [56, 65, 68], "common": 56, "quickli": 57, "discern": 57, "later": [57, 85], "exp": 62, "x0": [62, 63], "y0": [62, 63], "lin": 62, "k0": [62, 64, 66, 80, 84, 85], "k1": [62, 64, 66, 80, 84, 85], "f": [62, 79, 83], "quadr": 62, "k2": [62, 66], "calculation_typ": [65, 68, 69], "rate_of_chang": [65, 68, 69], "variant": [65, 68], "pass": [65, 68], "onto": [65, 68], "save": 65, "instead": [65, 68, 69], "_predict": 65, "get_last_data_entri": [65, 68, 69], "get_manual_prog": [65, 68], "target_x": [65, 68, 69, 74, 79, 83], "get_mean_i": [65, 68, 69], "mean": [65, 68, 69], "get_prediction_raw": 65, "standard": [65, 68], "get_prog_exp": [65, 68, 69], "get_prog_lin": [65, 68, 69], "get_prog_quadr": [65, 68, 69], "get_valu": [65, 68, 69], "combin": [65, 68, 69, 87], "made": [65, 68, 69], "progression_data": 68, "shape": 68, "progress": 68, "_his_end_valu": 68, "_interval_changer": 68, "pair": 68, "get_historical_data_raw": 68, "get_interval_change_rate_raw": 68, "demand_contain": 68, "s_x": 68, "r_": 68, "intvl": 68, "_": 68, "b": [68, 71, 88], "s_y": 68, "process": [69, 72], "past": 69, "_data": 69, "_coef": 69, "_calculation_typ": 69, "xys1": [71, 87], "xys2": [71, 87], "ascending_x": 71, "zip": [71, 88], "two": [71, 87], "condit": 71, "nr1": 71, "nr2": 71, "c": [71, 88], "ascend": [71, 87], "algorithm": 71, "format": [71, 88], "kei": [72, 86], "column_nam": 72, "column_valu": 72, "orient": 72, "first_row_entri": 72, "last_x": 73, "cut": 73, "tail": 73, "larger": 73, "than": [73, 86], "off": 73, "kept": 73, "start_point": 74, "change_r": 74, "y_": 74, "x_": 74, "x_start": 74, "y_start": 74, "x_new": 74, "y_new": 74, "out": 75, "inf": [75, 76], "nan": [75, 76], "check": [76, 77, 78], "could": 76, "without": 76, "throw": 76, "convers": 76, "xy": [77, 81], "wrapper": 77, "is_zero": 77, "second": 77, "left": 77, "column": 77, "k_0": [79, 83], "k_1": [79, 83], "visual": [80, 84, 85], "immedi": [80, 84, 85], "plot": [80, 82, 84, 85], "titl": 82, "x_label": 82, "y_label": 82, "show": 82, "label": 82, "k_2": 83, "k3": 84, "readabl": 86, "would": 86, "regular": 86, "them": 87, "y1": 87, "y2": 87, "combine_data_on_x": 88, "anoth": 88, "cast": 88, "onc": 88, "next": 88, "contribut": [1, 33], "word": 89, "relev": [13, 28], "directli": 48, "reus": 60, "veri": 60, "context": 60, "therefor": 60, "__str__": [17, 21, 24, 37, 46]}, "objects": {"": [[0, 0, 0, "-", "endemo2"]], "endemo2": [[1, 0, 0, "-", "execution"], [13, 0, 0, "-", "general"], [28, 0, 0, "-", "industry"], [33, 0, 0, "-", "input"], [48, 0, 0, "-", "sectors"], [60, 0, 0, "-", "utility"]], "endemo2.execution": [[2, 0, 0, "-", "endemo"], [4, 0, 0, "-", "output"]], "endemo2.execution.endemo": [[3, 1, 1, "", "Endemo"]], "endemo2.execution.endemo.Endemo": [[3, 2, 1, "", "load_model"], [3, 2, 1, "", "read_input"], [3, 2, 1, "", "save_model"], [3, 2, 1, "", "write_debug_output"], [3, 2, 1, "", "write_output"]], "endemo2.execution.output": [[5, 1, 1, "", "FileGenerator"], [6, 3, 1, "", "generate_amount_prognosis_output"], [7, 3, 1, "", "generate_coefficient_output"], [8, 3, 1, "", "generate_demand_output"], [9, 3, 1, "", "generate_gdp_prognosis_output"], [10, 3, 1, "", "generate_population_prognosis_output"], [11, 3, 1, "", "generate_specific_consumption_output"], [12, 3, 1, "", "shortcut_coef_output"]], "endemo2.general": [[14, 0, 0, "-", "country"], [16, 0, 0, "-", "country_containers"], [19, 0, 0, "-", "demand_containers"]], "endemo2.general.country": [[15, 1, 1, "", "Country"]], "endemo2.general.country.Country": [[15, 2, 1, "", "calculate_total_demand"], [15, 2, 1, "", "get_gdp"], [15, 2, 1, "", "get_name"], [15, 2, 1, "", "get_nuts2_root"], [15, 2, 1, "", "get_population"], [15, 2, 1, "", "get_sector"]], "endemo2.general.country_containers": [[17, 1, 1, "", "NutsRegion"], [18, 1, 1, "", "Population"]], "endemo2.general.country_containers.NutsRegion": [[17, 2, 1, "", "__str__"], [17, 2, 1, "", "add_child_region"], [17, 2, 1, "", "get_all_leaf_nodes"], [17, 2, 1, "", "get_historical_data"], [17, 2, 1, "", "get_node"], [17, 2, 1, "", "get_nodes_dfs"], [17, 2, 1, "", "get_pop"], [17, 2, 1, "", "get_pop_his_year"], [17, 2, 1, "", "get_pop_perc_of_subregion_in_year"], [17, 2, 1, "", "get_pop_prog"], [17, 2, 1, "", "get_region_name"]], "endemo2.general.country_containers.Population": [[18, 2, 1, "", "get_country_historical_data"], [18, 2, 1, "", "get_country_prog"], [18, 2, 1, "", "get_data"], [18, 2, 1, "", "get_nuts2_prog"], [18, 2, 1, "", "get_nuts2_root"], [18, 2, 1, "", "get_prog"]], "endemo2.general.demand_containers": [[20, 1, 1, "", "CA"], [21, 1, 1, "", "Demand"], [22, 1, 1, "", "DemandType"], [23, 1, 1, "", "EH"], [24, 1, 1, "", "Heat"], [25, 1, 1, "", "HisProg"], [26, 1, 1, "", "Interval"], [27, 1, 1, "", "SC"]], "endemo2.general.demand_containers.CA": [[20, 2, 1, "", "__add__"], [20, 2, 1, "", "__mul__"], [20, 4, 1, "", "alpha2"], [20, 4, 1, "", "alpha3"], [20, 2, 1, "", "count"], [20, 4, 1, "", "german_name"], [20, 2, 1, "", "index"]], "endemo2.general.demand_containers.Demand": [[21, 2, 1, "", "__str__"], [21, 2, 1, "", "add"], [21, 2, 1, "", "copy_scale"], [21, 2, 1, "", "get"], [21, 2, 1, "", "scale"], [21, 2, 1, "", "set"]], "endemo2.general.demand_containers.EH": [[23, 2, 1, "", "__add__"], [23, 2, 1, "", "__mul__"], [23, 2, 1, "", "count"], [23, 4, 1, "", "electricity"], [23, 4, 1, "", "heat"], [23, 2, 1, "", "index"]], "endemo2.general.demand_containers.Heat": [[24, 2, 1, "", "__str__"]], "endemo2.general.demand_containers.HisProg": [[25, 2, 1, "", "__add__"], [25, 2, 1, "", "__mul__"], [25, 2, 1, "", "count"], [25, 4, 1, "", "historical"], [25, 2, 1, "", "index"], [25, 4, 1, "", "prognosis"]], "endemo2.general.demand_containers.Interval": [[26, 2, 1, "", "__add__"], [26, 2, 1, "", "__mul__"], [26, 2, 1, "", "count"], [26, 4, 1, "", "end"], [26, 2, 1, "", "index"], [26, 4, 1, "", "start"]], "endemo2.general.demand_containers.SC": [[27, 2, 1, "", "__add__"], [27, 2, 1, "", "__mul__"], [27, 2, 1, "", "count"], [27, 4, 1, "", "electricity"], [27, 4, 1, "", "heat"], [27, 4, 1, "", "hydrogen"], [27, 2, 1, "", "index"], [27, 4, 1, "", "max_subst_h2"]], "endemo2.industry": [[29, 0, 0, "-", "products"]], "endemo2.industry.products": [[30, 1, 1, "", "Product"], [31, 1, 1, "", "ProductPrimSec"], [32, 1, 1, "", "SpecificConsumptionData"]], "endemo2.industry.products.Product": [[30, 2, 1, "", "calculate_demand"], [30, 2, 1, "", "get_active_timeseries"], [30, 2, 1, "", "get_amount_prog"], [30, 2, 1, "", "get_coef"], [30, 2, 1, "", "get_nuts2_installed_capacities"], [30, 2, 1, "", "get_specific_consumption"], [30, 2, 1, "", "get_timeseries_amount_per_capita_per_gdp"], [30, 2, 1, "", "get_timeseries_amount_per_capita_per_year"], [30, 2, 1, "", "get_timeseries_amount_per_gdp"], [30, 2, 1, "", "get_timeseries_amount_per_year"], [30, 2, 1, "", "is_empty"], [30, 2, 1, "", "is_per_capita"], [30, 2, 1, "", "is_per_gdp"], [30, 2, 1, "", "split_heat_levels"]], "endemo2.industry.products.SpecificConsumptionData": [[32, 2, 1, "", "get"], [32, 2, 1, "", "get__calculate_sc"], [32, 2, 1, "", "get_coef"], [32, 2, 1, "", "get_scale"]], "endemo2.input": [[34, 0, 0, "-", "control_parameters"], [40, 0, 0, "-", "input"]], "endemo2.input.control_parameters": [[35, 1, 1, "", "ControlParameters"], [36, 1, 1, "", "ForecastMethod"], [37, 1, 1, "", "GeneralSettings"], [38, 1, 1, "", "IndustrySettings"], [39, 1, 1, "", "ProductSettings"]], "endemo2.input.control_parameters.GeneralSettings": [[37, 2, 1, "", "__str__"], [37, 2, 1, "", "get_active_sectors"], [37, 2, 1, "", "get_parameter"]], "endemo2.input.control_parameters.ProductSettings": [[39, 2, 1, "", "__add__"], [39, 2, 1, "", "__mul__"], [39, 4, 1, "", "active"], [39, 2, 1, "", "count"], [39, 2, 1, "", "index"], [39, 4, 1, "", "manual_exp_change_rate"], [39, 4, 1, "", "perc_used"]], "endemo2.input.input": [[41, 1, 1, "", "FileReadingHelper"], [42, 1, 1, "", "GeneralInput"], [43, 1, 1, "", "IndustryInput"], [44, 1, 1, "", "Input"], [45, 1, 1, "", "PopulationInput"], [46, 1, 1, "", "ProductInput"], [47, 1, 1, "", "RestSectorInput"]], "endemo2.input.input.FileReadingHelper": [[41, 2, 1, "", "get"], [41, 2, 1, "", "set_path_and_read"], [41, 2, 1, "", "skip_years"]], "endemo2.input.input.ProductInput": [[46, 2, 1, "", "__str__"]], "endemo2.sectors": [[49, 0, 0, "-", "commercial_trade_services_sector"], [51, 0, 0, "-", "household_sector"], [53, 0, 0, "-", "industry_sector"], [55, 0, 0, "-", "sector"], [58, 0, 0, "-", "transport_sector"]], "endemo2.sectors.commercial_trade_services_sector": [[50, 1, 1, "", "CommercialTradeServices"]], "endemo2.sectors.commercial_trade_services_sector.CommercialTradeServices": [[50, 2, 1, "", "calculate_forecasted_demand"]], "endemo2.sectors.household_sector": [[52, 1, 1, "", "Household"]], "endemo2.sectors.household_sector.Household": [[52, 2, 1, "", "calculate_forecasted_demand"]], "endemo2.sectors.industry_sector": [[54, 1, 1, "", "Industry"]], "endemo2.sectors.industry_sector.Industry": [[54, 2, 1, "", "calculate_demand_split_by_nuts2"], [54, 2, 1, "", "calculate_forecasted_demand"], [54, 2, 1, "", "calculate_forecasted_demand_split_by_nuts2"], [54, 2, 1, "", "calculate_product_demand"], [54, 2, 1, "", "calculate_rest_demand_split_by_nuts2"], [54, 2, 1, "", "calculate_rest_sector_demand"], [54, 2, 1, "", "calculate_total_demand"], [54, 2, 1, "", "calculate_total_demand_split_by_nuts2"], [54, 2, 1, "", "get_product"], [54, 2, 1, "", "prog_product_amount"]], "endemo2.sectors.sector": [[56, 1, 1, "", "Sector"], [57, 1, 1, "", "SectorIdentifier"]], "endemo2.sectors.transport_sector": [[59, 1, 1, "", "Transport"]], "endemo2.utility": [[61, 0, 0, "-", "prediction_models"], [70, 0, 0, "-", "utility"]], "endemo2.utility.prediction_models": [[62, 1, 1, "", "Coef"], [63, 1, 1, "", "Exp"], [64, 1, 1, "", "Lin"], [65, 1, 1, "", "PredictedTimeseries"], [66, 1, 1, "", "Quadr"], [67, 1, 1, "", "StartPoint"], [68, 1, 1, "", "TimeStepSequence"], [69, 1, 1, "", "Timeseries"]], "endemo2.utility.prediction_models.Exp": [[63, 2, 1, "", "__add__"], [63, 2, 1, "", "__mul__"], [63, 2, 1, "", "count"], [63, 2, 1, "", "index"], [63, 4, 1, "", "r"], [63, 4, 1, "", "x0"], [63, 4, 1, "", "y0"]], "endemo2.utility.prediction_models.Lin": [[64, 2, 1, "", "__add__"], [64, 2, 1, "", "__mul__"], [64, 2, 1, "", "count"], [64, 2, 1, "", "index"], [64, 4, 1, "", "k0"], [64, 4, 1, "", "k1"]], "endemo2.utility.prediction_models.PredictedTimeseries": [[65, 2, 1, "", "get_coef"], [65, 2, 1, "", "get_data"], [65, 2, 1, "", "get_last_data_entry"], [65, 2, 1, "", "get_manual_prog"], [65, 2, 1, "", "get_mean_y"], [65, 2, 1, "", "get_prediction_raw"], [65, 2, 1, "", "get_prog"], [65, 2, 1, "", "get_prog_exp"], [65, 2, 1, "", "get_prog_lin"], [65, 2, 1, "", "get_prog_quadr"], [65, 2, 1, "", "get_value"]], "endemo2.utility.prediction_models.Quadr": [[66, 2, 1, "", "__add__"], [66, 2, 1, "", "__mul__"], [66, 2, 1, "", "count"], [66, 2, 1, "", "index"], [66, 4, 1, "", "k0"], [66, 4, 1, "", "k1"], [66, 4, 1, "", "k2"]], "endemo2.utility.prediction_models.TimeStepSequence": [[68, 2, 1, "", "get_coef"], [68, 2, 1, "", "get_data"], [68, 2, 1, "", "get_historical_data_raw"], [68, 2, 1, "", "get_interval_change_rate_raw"], [68, 2, 1, "", "get_last_data_entry"], [68, 2, 1, "", "get_manual_prog"], [68, 2, 1, "", "get_mean_y"], [68, 2, 1, "", "get_prog"], [68, 2, 1, "", "get_prog_exp"], [68, 2, 1, "", "get_prog_lin"], [68, 2, 1, "", "get_prog_quadr"], [68, 2, 1, "", "get_value"]], "endemo2.utility.prediction_models.Timeseries": [[69, 2, 1, "", "get_coef"], [69, 2, 1, "", "get_data"], [69, 2, 1, "", "get_last_data_entry"], [69, 2, 1, "", "get_mean_y"], [69, 2, 1, "", "get_prog"], [69, 2, 1, "", "get_prog_exp"], [69, 2, 1, "", "get_prog_lin"], [69, 2, 1, "", "get_prog_quadr"], [69, 2, 1, "", "get_value"]], "endemo2.utility.utility": [[71, 3, 1, "", "combine_data_on_x"], [72, 3, 1, "", "convert_table_to_filtered_data_series_per_country"], [73, 3, 1, "", "cut_after_x"], [74, 3, 1, "", "exp_change"], [75, 3, 1, "", "filter_out_nan_and_inf"], [76, 3, 1, "", "is_permissible_float"], [77, 3, 1, "", "is_tuple_list_zero"], [78, 3, 1, "", "is_zero"], [79, 3, 1, "", "lin_prediction"], [80, 3, 1, "", "linear_regression"], [81, 3, 1, "", "map_data_y"], [82, 3, 1, "", "plot_timeseries"], [83, 3, 1, "", "quadr_prediction"], [84, 3, 1, "", "quadratic_regression"], [85, 3, 1, "", "quadratic_regression_delta"], [86, 3, 1, "", "str_dict"], [87, 3, 1, "", "zip_data_on_x_and_map"], [88, 3, 1, "", "zip_on_x"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"welcom": 89, "sphinx": [], "autosummari": [], "recurs": [], "document": [], "endemo2": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88], "execut": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "endemo": [2, 3], "output": [4, 5, 6, 7, 8, 9, 10, 11, 12], "filegener": 5, "generate_amount_prognosis_output": 6, "generate_coefficient_output": 7, "generate_demand_output": 8, "generate_gdp_prognosis_output": 9, "generate_population_prognosis_output": 10, "generate_specific_consumption_output": 11, "shortcut_coef_output": 12, "gener": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "countri": [14, 15], "country_contain": [16, 17, 18], "nutsregion": 17, "popul": 18, "demand_contain": [19, 20, 21, 22, 23, 24, 25, 26, 27], "ca": 20, "demand": 21, "demandtyp": 22, "eh": 23, "heat": 24, "hisprog": 25, "interv": 26, "sc": 27, "industri": [28, 29, 30, 31, 32, 54], "product": [29, 30, 31, 32], "productprimsec": 31, "specificconsumptiondata": 32, "input": [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], "control_paramet": [34, 35, 36, 37, 38, 39], "controlparamet": 35, "forecastmethod": 36, "generalset": 37, "industryset": 38, "productset": 39, "filereadinghelp": 41, "generalinput": 42, "industryinput": 43, "populationinput": 45, "productinput": 46, "restsectorinput": 47, "sector": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "commercial_trade_services_sector": [49, 50], "commercialtradeservic": 50, "household_sector": [51, 52], "household": 52, "industry_sector": [53, 54], "sectoridentifi": 57, "transport_sector": [58, 59], "transport": 59, "util": [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88], "prediction_model": [61, 62, 63, 64, 65, 66, 67, 68, 69], "coef": 62, "exp": 63, "lin": 64, "predictedtimeseri": 65, "quadr": 66, "startpoint": 67, "timestepsequ": 68, "timeseri": 69, "combine_data_on_x": 71, "convert_table_to_filtered_data_series_per_countri": 72, "cut_after_x": 73, "exp_chang": 74, "filter_out_nan_and_inf": 75, "is_permissible_float": 76, "is_tuple_list_zero": 77, "is_zero": 78, "lin_predict": 79, "linear_regress": 80, "map_data_i": 81, "plot_timeseri": 82, "quadr_predict": 83, "quadratic_regress": 84, "quadratic_regression_delta": 85, "str_dict": 86, "zip_data_on_x_and_map": 87, "zip_on_x": 88, "my": 89, "toolbox": 89}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"endemo2.execution.output.generate_amount_prognosis_output": [[6, "endemo2-execution-output-generate-amount-prognosis-output"]], "endemo2.execution.output.generate_coefficient_output": [[7, "endemo2-execution-output-generate-coefficient-output"]], "endemo2.execution.output.generate_demand_output": [[8, "endemo2-execution-output-generate-demand-output"]], "endemo2.execution.output.generate_gdp_prognosis_output": [[9, "endemo2-execution-output-generate-gdp-prognosis-output"]], "endemo2.execution.output.generate_population_prognosis_output": [[10, "endemo2-execution-output-generate-population-prognosis-output"]], "endemo2.execution.output.generate_specific_consumption_output": [[11, "endemo2-execution-output-generate-specific-consumption-output"]], "endemo2.execution.output.shortcut_coef_output": [[12, "endemo2-execution-output-shortcut-coef-output"]], "endemo2.utility.utility.combine_data_on_x": [[71, "endemo2-utility-utility-combine-data-on-x"]], "endemo2.utility.utility.convert_table_to_filtered_data_series_per_country": [[72, "endemo2-utility-utility-convert-table-to-filtered-data-series-per-country"]], "endemo2.utility.utility.cut_after_x": [[73, "endemo2-utility-utility-cut-after-x"]], "endemo2.utility.utility.exp_change": [[74, "endemo2-utility-utility-exp-change"]], "endemo2.utility.utility.filter_out_nan_and_inf": [[75, "endemo2-utility-utility-filter-out-nan-and-inf"]], "endemo2.utility.utility.is_permissible_float": [[76, "endemo2-utility-utility-is-permissible-float"]], "endemo2.utility.utility.is_tuple_list_zero": [[77, "endemo2-utility-utility-is-tuple-list-zero"]], "endemo2.utility.utility.is_zero": [[78, "endemo2-utility-utility-is-zero"]], "endemo2.utility.utility.lin_prediction": [[79, "endemo2-utility-utility-lin-prediction"]], "endemo2.utility.utility.linear_regression": [[80, "endemo2-utility-utility-linear-regression"]], "endemo2.utility.utility.map_data_y": [[81, "endemo2-utility-utility-map-data-y"]], "endemo2.utility.utility.plot_timeseries": [[82, "endemo2-utility-utility-plot-timeseries"]], "endemo2.utility.utility.quadr_prediction": [[83, "endemo2-utility-utility-quadr-prediction"]], "endemo2.utility.utility.quadratic_regression": [[84, "endemo2-utility-utility-quadratic-regression"]], "endemo2.utility.utility.quadratic_regression_delta": [[85, "endemo2-utility-utility-quadratic-regression-delta"]], "endemo2.utility.utility.str_dict": [[86, "endemo2-utility-utility-str-dict"]], "endemo2.utility.utility.zip_data_on_x_and_map": [[87, "endemo2-utility-utility-zip-data-on-x-and-map"]], "endemo2.utility.utility.zip_on_x": [[88, "endemo2-utility-utility-zip-on-x"]], "endemo2.execution.endemo": [[2, "module-endemo2.execution.endemo"]], "endemo2.execution.output": [[4, "module-endemo2.execution.output"]], "endemo2.general.country": [[14, "module-endemo2.general.country"]], "endemo2.general.country_containers": [[16, "module-endemo2.general.country_containers"]], "endemo2.general.demand_containers": [[19, "module-endemo2.general.demand_containers"]], "endemo2.industry.products": [[29, "module-endemo2.industry.products"]], "endemo2.input.control_parameters": [[34, "module-endemo2.input.control_parameters"]], "endemo2.input.input": [[40, "module-endemo2.input.input"]], "endemo2.sectors.commercial_trade_services_sector": [[49, "module-endemo2.sectors.commercial_trade_services_sector"]], "endemo2.sectors.household_sector": [[51, "module-endemo2.sectors.household_sector"]], "endemo2.sectors.industry_sector": [[53, "module-endemo2.sectors.industry_sector"]], "endemo2.sectors.sector": [[55, "module-endemo2.sectors.sector"]], "endemo2.sectors.transport_sector": [[58, "module-endemo2.sectors.transport_sector"]], "endemo2.utility.prediction_models": [[61, "module-endemo2.utility.prediction_models"]], "endemo2.utility.utility": [[70, "module-endemo2.utility.utility"]], "endemo2": [[0, "module-endemo2"]], "endemo2.execution": [[1, "module-endemo2.execution"]], "endemo2.general": [[13, "module-endemo2.general"]], "endemo2.industry": [[28, "module-endemo2.industry"]], "endemo2.input": [[33, "module-endemo2.input"]], "endemo2.sectors": [[48, "module-endemo2.sectors"]], "endemo2.utility": [[60, "module-endemo2.utility"]], "Welcome to My Toolbox": [[89, "welcome-to-my-toolbox"]], "endemo2.execution.endemo.Endemo": [[3, "endemo2-execution-endemo-endemo"]], "endemo2.execution.output.FileGenerator": [[5, "endemo2-execution-output-filegenerator"]], "endemo2.general.country.Country": [[15, "endemo2-general-country-country"]], "endemo2.general.country_containers.NutsRegion": [[17, "endemo2-general-country-containers-nutsregion"]], "endemo2.general.country_containers.Population": [[18, "endemo2-general-country-containers-population"]], "endemo2.general.demand_containers.CA": [[20, "endemo2-general-demand-containers-ca"]], "endemo2.general.demand_containers.Demand": [[21, "endemo2-general-demand-containers-demand"]], "endemo2.general.demand_containers.DemandType": [[22, "endemo2-general-demand-containers-demandtype"]], "endemo2.general.demand_containers.EH": [[23, "endemo2-general-demand-containers-eh"]], "endemo2.general.demand_containers.Heat": [[24, "endemo2-general-demand-containers-heat"]], "endemo2.general.demand_containers.HisProg": [[25, "endemo2-general-demand-containers-hisprog"]], "endemo2.general.demand_containers.Interval": [[26, "endemo2-general-demand-containers-interval"]], "endemo2.general.demand_containers.SC": [[27, "endemo2-general-demand-containers-sc"]], "endemo2.industry.products.Product": [[30, "endemo2-industry-products-product"]], "endemo2.industry.products.ProductPrimSec": [[31, "endemo2-industry-products-productprimsec"]], "endemo2.industry.products.SpecificConsumptionData": [[32, "endemo2-industry-products-specificconsumptiondata"]], "endemo2.input.control_parameters.ControlParameters": [[35, "endemo2-input-control-parameters-controlparameters"]], "endemo2.input.control_parameters.ForecastMethod": [[36, "endemo2-input-control-parameters-forecastmethod"]], "endemo2.input.control_parameters.GeneralSettings": [[37, "endemo2-input-control-parameters-generalsettings"]], "endemo2.input.control_parameters.IndustrySettings": [[38, "endemo2-input-control-parameters-industrysettings"]], "endemo2.input.control_parameters.ProductSettings": [[39, "endemo2-input-control-parameters-productsettings"]], "endemo2.input.input.FileReadingHelper": [[41, "endemo2-input-input-filereadinghelper"]], "endemo2.input.input.GeneralInput": [[42, "endemo2-input-input-generalinput"]], "endemo2.input.input.IndustryInput": [[43, "endemo2-input-input-industryinput"]], "endemo2.input.input.Input": [[44, "endemo2-input-input-input"]], "endemo2.input.input.PopulationInput": [[45, "endemo2-input-input-populationinput"]], "endemo2.input.input.ProductInput": [[46, "endemo2-input-input-productinput"]], "endemo2.input.input.RestSectorInput": [[47, "endemo2-input-input-restsectorinput"]], "endemo2.sectors.commercial_trade_services_sector.CommercialTradeServices": [[50, "endemo2-sectors-commercial-trade-services-sector-commercialtradeservices"]], "endemo2.sectors.household_sector.Household": [[52, "endemo2-sectors-household-sector-household"]], "endemo2.sectors.industry_sector.Industry": [[54, "endemo2-sectors-industry-sector-industry"]], "endemo2.sectors.sector.Sector": [[56, "endemo2-sectors-sector-sector"]], "endemo2.sectors.sector.SectorIdentifier": [[57, "endemo2-sectors-sector-sectoridentifier"]], "endemo2.sectors.transport_sector.Transport": [[59, "endemo2-sectors-transport-sector-transport"]], "endemo2.utility.prediction_models.Coef": [[62, "endemo2-utility-prediction-models-coef"]], "endemo2.utility.prediction_models.Exp": [[63, "endemo2-utility-prediction-models-exp"]], "endemo2.utility.prediction_models.Lin": [[64, "endemo2-utility-prediction-models-lin"]], "endemo2.utility.prediction_models.PredictedTimeseries": [[65, "endemo2-utility-prediction-models-predictedtimeseries"]], "endemo2.utility.prediction_models.Quadr": [[66, "endemo2-utility-prediction-models-quadr"]], "endemo2.utility.prediction_models.StartPoint": [[67, "endemo2-utility-prediction-models-startpoint"]], "endemo2.utility.prediction_models.TimeStepSequence": [[68, "endemo2-utility-prediction-models-timestepsequence"]], "endemo2.utility.prediction_models.Timeseries": [[69, "endemo2-utility-prediction-models-timeseries"]]}, "indexentries": {"endemo2.execution.endemo": [[2, "module-endemo2.execution.endemo"]], "module": [[2, "module-endemo2.execution.endemo"], [4, "module-endemo2.execution.output"], [14, "module-endemo2.general.country"], [16, "module-endemo2.general.country_containers"], [19, "module-endemo2.general.demand_containers"], [29, "module-endemo2.industry.products"], [34, "module-endemo2.input.control_parameters"], [40, "module-endemo2.input.input"], [49, "module-endemo2.sectors.commercial_trade_services_sector"], [51, "module-endemo2.sectors.household_sector"], [53, "module-endemo2.sectors.industry_sector"], [55, "module-endemo2.sectors.sector"], [58, "module-endemo2.sectors.transport_sector"], [61, "module-endemo2.utility.prediction_models"]], "endemo (class in endemo2.execution.endemo)": [[3, "endemo2.execution.endemo.Endemo"]], "load_model() (endemo method)": [[3, "endemo2.execution.endemo.Endemo.load_model"]], "read_input() (endemo method)": [[3, "endemo2.execution.endemo.Endemo.read_input"]], "save_model() (endemo method)": [[3, "endemo2.execution.endemo.Endemo.save_model"]], "write_debug_output() (endemo method)": [[3, "endemo2.execution.endemo.Endemo.write_debug_output"]], "write_output() (endemo method)": [[3, "endemo2.execution.endemo.Endemo.write_output"]], "endemo2.execution.output": [[4, "module-endemo2.execution.output"]], "filegenerator (class in endemo2.execution.output)": [[5, "endemo2.execution.output.FileGenerator"]], "endemo2.general.country": [[14, "module-endemo2.general.country"]], "country (class in endemo2.general.country)": [[15, "endemo2.general.country.Country"]], "calculate_total_demand() (country method)": [[15, "endemo2.general.country.Country.calculate_total_demand"]], "get_gdp() (country method)": [[15, "endemo2.general.country.Country.get_gdp"]], "get_name() (country method)": [[15, "endemo2.general.country.Country.get_name"]], "get_nuts2_root() (country method)": [[15, "endemo2.general.country.Country.get_nuts2_root"]], "get_population() (country method)": [[15, "endemo2.general.country.Country.get_population"]], "get_sector() (country method)": [[15, "endemo2.general.country.Country.get_sector"]], "endemo2.general.country_containers": [[16, "module-endemo2.general.country_containers"]], "nutsregion (class in endemo2.general.country_containers)": [[17, "endemo2.general.country_containers.NutsRegion"]], "__str__() (nutsregion method)": [[17, "endemo2.general.country_containers.NutsRegion.__str__"]], "add_child_region() (nutsregion method)": [[17, "endemo2.general.country_containers.NutsRegion.add_child_region"]], "get_all_leaf_nodes() (nutsregion method)": [[17, "endemo2.general.country_containers.NutsRegion.get_all_leaf_nodes"]], "get_historical_data() (nutsregion method)": [[17, "endemo2.general.country_containers.NutsRegion.get_historical_data"]], "get_node() (nutsregion method)": [[17, "endemo2.general.country_containers.NutsRegion.get_node"]], "get_nodes_dfs() (nutsregion method)": [[17, "endemo2.general.country_containers.NutsRegion.get_nodes_dfs"]], "get_pop() (nutsregion method)": [[17, "endemo2.general.country_containers.NutsRegion.get_pop"]], "get_pop_his_year() (nutsregion method)": [[17, "endemo2.general.country_containers.NutsRegion.get_pop_his_year"]], "get_pop_perc_of_subregion_in_year() (nutsregion method)": [[17, "endemo2.general.country_containers.NutsRegion.get_pop_perc_of_subregion_in_year"]], "get_pop_prog() (nutsregion method)": [[17, "endemo2.general.country_containers.NutsRegion.get_pop_prog"]], "get_region_name() (nutsregion method)": [[17, "endemo2.general.country_containers.NutsRegion.get_region_name"]], "population (class in endemo2.general.country_containers)": [[18, "endemo2.general.country_containers.Population"]], "get_country_historical_data() (population method)": [[18, "endemo2.general.country_containers.Population.get_country_historical_data"]], "get_country_prog() (population method)": [[18, "endemo2.general.country_containers.Population.get_country_prog"]], "get_data() (population method)": [[18, "endemo2.general.country_containers.Population.get_data"]], "get_nuts2_prog() (population method)": [[18, "endemo2.general.country_containers.Population.get_nuts2_prog"]], "get_nuts2_root() (population method)": [[18, "endemo2.general.country_containers.Population.get_nuts2_root"]], "get_prog() (population method)": [[18, "endemo2.general.country_containers.Population.get_prog"]], "endemo2.general.demand_containers": [[19, "module-endemo2.general.demand_containers"]], "ca (class in endemo2.general.demand_containers)": [[20, "endemo2.general.demand_containers.CA"]], "__add__() (ca method)": [[20, "endemo2.general.demand_containers.CA.__add__"]], "__mul__() (ca method)": [[20, "endemo2.general.demand_containers.CA.__mul__"]], "alpha2 (ca attribute)": [[20, "endemo2.general.demand_containers.CA.alpha2"]], "alpha3 (ca attribute)": [[20, "endemo2.general.demand_containers.CA.alpha3"]], "count() (ca method)": [[20, "endemo2.general.demand_containers.CA.count"]], "german_name (ca attribute)": [[20, "endemo2.general.demand_containers.CA.german_name"]], "index() (ca method)": [[20, "endemo2.general.demand_containers.CA.index"]], "demand (class in endemo2.general.demand_containers)": [[21, "endemo2.general.demand_containers.Demand"]], "__str__() (demand method)": [[21, "endemo2.general.demand_containers.Demand.__str__"]], "add() (demand method)": [[21, "endemo2.general.demand_containers.Demand.add"]], "copy_scale() (demand method)": [[21, "endemo2.general.demand_containers.Demand.copy_scale"]], "get() (demand method)": [[21, "endemo2.general.demand_containers.Demand.get"]], "scale() (demand method)": [[21, "endemo2.general.demand_containers.Demand.scale"]], "set() (demand method)": [[21, "endemo2.general.demand_containers.Demand.set"]], "demandtype (class in endemo2.general.demand_containers)": [[22, "endemo2.general.demand_containers.DemandType"]], "eh (class in endemo2.general.demand_containers)": [[23, "endemo2.general.demand_containers.EH"]], "__add__() (eh method)": [[23, "endemo2.general.demand_containers.EH.__add__"]], "__mul__() (eh method)": [[23, "endemo2.general.demand_containers.EH.__mul__"]], "count() (eh method)": [[23, "endemo2.general.demand_containers.EH.count"]], "electricity (eh attribute)": [[23, "endemo2.general.demand_containers.EH.electricity"]], "heat (eh attribute)": [[23, "endemo2.general.demand_containers.EH.heat"]], "index() (eh method)": [[23, "endemo2.general.demand_containers.EH.index"]], "heat (class in endemo2.general.demand_containers)": [[24, "endemo2.general.demand_containers.Heat"]], "__str__() (heat method)": [[24, "endemo2.general.demand_containers.Heat.__str__"]], "hisprog (class in endemo2.general.demand_containers)": [[25, "endemo2.general.demand_containers.HisProg"]], "__add__() (hisprog method)": [[25, "endemo2.general.demand_containers.HisProg.__add__"]], "__mul__() (hisprog method)": [[25, "endemo2.general.demand_containers.HisProg.__mul__"]], "count() (hisprog method)": [[25, "endemo2.general.demand_containers.HisProg.count"]], "historical (hisprog attribute)": [[25, "endemo2.general.demand_containers.HisProg.historical"]], "index() (hisprog method)": [[25, "endemo2.general.demand_containers.HisProg.index"]], "prognosis (hisprog attribute)": [[25, "endemo2.general.demand_containers.HisProg.prognosis"]], "interval (class in endemo2.general.demand_containers)": [[26, "endemo2.general.demand_containers.Interval"]], "__add__() (interval method)": [[26, "endemo2.general.demand_containers.Interval.__add__"]], "__mul__() (interval method)": [[26, "endemo2.general.demand_containers.Interval.__mul__"]], "count() (interval method)": [[26, "endemo2.general.demand_containers.Interval.count"]], "end (interval attribute)": [[26, "endemo2.general.demand_containers.Interval.end"]], "index() (interval method)": [[26, "endemo2.general.demand_containers.Interval.index"]], "start (interval attribute)": [[26, "endemo2.general.demand_containers.Interval.start"]], "sc (class in endemo2.general.demand_containers)": [[27, "endemo2.general.demand_containers.SC"]], "__add__() (sc method)": [[27, "endemo2.general.demand_containers.SC.__add__"]], "__mul__() (sc method)": [[27, "endemo2.general.demand_containers.SC.__mul__"]], "count() (sc method)": [[27, "endemo2.general.demand_containers.SC.count"]], "electricity (sc attribute)": [[27, "endemo2.general.demand_containers.SC.electricity"]], "heat (sc attribute)": [[27, "endemo2.general.demand_containers.SC.heat"]], "hydrogen (sc attribute)": [[27, "endemo2.general.demand_containers.SC.hydrogen"]], "index() (sc method)": [[27, "endemo2.general.demand_containers.SC.index"]], "max_subst_h2 (sc attribute)": [[27, "endemo2.general.demand_containers.SC.max_subst_h2"]], "endemo2.industry.products": [[29, "module-endemo2.industry.products"]], "product (class in endemo2.industry.products)": [[30, "endemo2.industry.products.Product"]], "calculate_demand() (product method)": [[30, "endemo2.industry.products.Product.calculate_demand"]], "get_active_timeseries() (product method)": [[30, "endemo2.industry.products.Product.get_active_timeseries"]], "get_amount_prog() (product method)": [[30, "endemo2.industry.products.Product.get_amount_prog"]], "get_coef() (product method)": [[30, "endemo2.industry.products.Product.get_coef"]], "get_nuts2_installed_capacities() (product method)": [[30, "endemo2.industry.products.Product.get_nuts2_installed_capacities"]], "get_specific_consumption() (product method)": [[30, "endemo2.industry.products.Product.get_specific_consumption"]], "get_timeseries_amount_per_capita_per_gdp() (product method)": [[30, "endemo2.industry.products.Product.get_timeseries_amount_per_capita_per_gdp"]], "get_timeseries_amount_per_capita_per_year() (product method)": [[30, "endemo2.industry.products.Product.get_timeseries_amount_per_capita_per_year"]], "get_timeseries_amount_per_gdp() (product method)": [[30, "endemo2.industry.products.Product.get_timeseries_amount_per_gdp"]], "get_timeseries_amount_per_year() (product method)": [[30, "endemo2.industry.products.Product.get_timeseries_amount_per_year"]], "is_empty() (product method)": [[30, "endemo2.industry.products.Product.is_empty"]], "is_per_capita() (product method)": [[30, "endemo2.industry.products.Product.is_per_capita"]], "is_per_gdp() (product method)": [[30, "endemo2.industry.products.Product.is_per_gdp"]], "split_heat_levels() (product method)": [[30, "endemo2.industry.products.Product.split_heat_levels"]], "productprimsec (class in endemo2.industry.products)": [[31, "endemo2.industry.products.ProductPrimSec"]], "specificconsumptiondata (class in endemo2.industry.products)": [[32, "endemo2.industry.products.SpecificConsumptionData"]], "get() (specificconsumptiondata method)": [[32, "endemo2.industry.products.SpecificConsumptionData.get"]], "get__calculate_sc() (specificconsumptiondata method)": [[32, "endemo2.industry.products.SpecificConsumptionData.get__calculate_sc"]], "get_coef() (specificconsumptiondata method)": [[32, "endemo2.industry.products.SpecificConsumptionData.get_coef"]], "get_scale() (specificconsumptiondata method)": [[32, "endemo2.industry.products.SpecificConsumptionData.get_scale"]], "endemo2.input.control_parameters": [[34, "module-endemo2.input.control_parameters"]], "controlparameters (class in endemo2.input.control_parameters)": [[35, "endemo2.input.control_parameters.ControlParameters"]], "forecastmethod (class in endemo2.input.control_parameters)": [[36, "endemo2.input.control_parameters.ForecastMethod"]], "generalsettings (class in endemo2.input.control_parameters)": [[37, "endemo2.input.control_parameters.GeneralSettings"]], "__str__() (generalsettings method)": [[37, "endemo2.input.control_parameters.GeneralSettings.__str__"]], "get_active_sectors() (generalsettings method)": [[37, "endemo2.input.control_parameters.GeneralSettings.get_active_sectors"]], "get_parameter() (generalsettings method)": [[37, "endemo2.input.control_parameters.GeneralSettings.get_parameter"]], "industrysettings (class in endemo2.input.control_parameters)": [[38, "endemo2.input.control_parameters.IndustrySettings"]], "productsettings (class in endemo2.input.control_parameters)": [[39, "endemo2.input.control_parameters.ProductSettings"]], "__add__() (productsettings method)": [[39, "endemo2.input.control_parameters.ProductSettings.__add__"]], "__mul__() (productsettings method)": [[39, "endemo2.input.control_parameters.ProductSettings.__mul__"]], "active (productsettings attribute)": [[39, "endemo2.input.control_parameters.ProductSettings.active"]], "count() (productsettings method)": [[39, "endemo2.input.control_parameters.ProductSettings.count"]], "index() (productsettings method)": [[39, "endemo2.input.control_parameters.ProductSettings.index"]], "manual_exp_change_rate (productsettings attribute)": [[39, "endemo2.input.control_parameters.ProductSettings.manual_exp_change_rate"]], "perc_used (productsettings attribute)": [[39, "endemo2.input.control_parameters.ProductSettings.perc_used"]], "endemo2.input.input": [[40, "module-endemo2.input.input"]], "filereadinghelper (class in endemo2.input.input)": [[41, "endemo2.input.input.FileReadingHelper"]], "get() (filereadinghelper method)": [[41, "endemo2.input.input.FileReadingHelper.get"]], "set_path_and_read() (filereadinghelper method)": [[41, "endemo2.input.input.FileReadingHelper.set_path_and_read"]], "skip_years() (filereadinghelper method)": [[41, "endemo2.input.input.FileReadingHelper.skip_years"]], "generalinput (class in endemo2.input.input)": [[42, "endemo2.input.input.GeneralInput"]], "industryinput (class in endemo2.input.input)": [[43, "endemo2.input.input.IndustryInput"]], "input (class in endemo2.input.input)": [[44, "endemo2.input.input.Input"]], "populationinput (class in endemo2.input.input)": [[45, "endemo2.input.input.PopulationInput"]], "productinput (class in endemo2.input.input)": [[46, "endemo2.input.input.ProductInput"]], "__str__() (productinput method)": [[46, "endemo2.input.input.ProductInput.__str__"]], "restsectorinput (class in endemo2.input.input)": [[47, "endemo2.input.input.RestSectorInput"]], "endemo2.sectors.commercial_trade_services_sector": [[49, "module-endemo2.sectors.commercial_trade_services_sector"]], "commercialtradeservices (class in endemo2.sectors.commercial_trade_services_sector)": [[50, "endemo2.sectors.commercial_trade_services_sector.CommercialTradeServices"]], "calculate_forecasted_demand() (commercialtradeservices method)": [[50, "endemo2.sectors.commercial_trade_services_sector.CommercialTradeServices.calculate_forecasted_demand"]], "endemo2.sectors.household_sector": [[51, "module-endemo2.sectors.household_sector"]], "household (class in endemo2.sectors.household_sector)": [[52, "endemo2.sectors.household_sector.Household"]], "calculate_forecasted_demand() (household method)": [[52, "endemo2.sectors.household_sector.Household.calculate_forecasted_demand"]], "endemo2.sectors.industry_sector": [[53, "module-endemo2.sectors.industry_sector"]], "industry (class in endemo2.sectors.industry_sector)": [[54, "endemo2.sectors.industry_sector.Industry"]], "calculate_demand_split_by_nuts2() (industry method)": [[54, "endemo2.sectors.industry_sector.Industry.calculate_demand_split_by_nuts2"]], "calculate_forecasted_demand() (industry method)": [[54, "endemo2.sectors.industry_sector.Industry.calculate_forecasted_demand"]], "calculate_forecasted_demand_split_by_nuts2() (industry method)": [[54, "endemo2.sectors.industry_sector.Industry.calculate_forecasted_demand_split_by_nuts2"]], "calculate_product_demand() (industry method)": [[54, "endemo2.sectors.industry_sector.Industry.calculate_product_demand"]], "calculate_rest_demand_split_by_nuts2() (industry method)": [[54, "endemo2.sectors.industry_sector.Industry.calculate_rest_demand_split_by_nuts2"]], "calculate_rest_sector_demand() (industry method)": [[54, "endemo2.sectors.industry_sector.Industry.calculate_rest_sector_demand"]], "calculate_total_demand() (industry method)": [[54, "endemo2.sectors.industry_sector.Industry.calculate_total_demand"]], "calculate_total_demand_split_by_nuts2() (industry method)": [[54, "endemo2.sectors.industry_sector.Industry.calculate_total_demand_split_by_nuts2"]], "get_product() (industry method)": [[54, "endemo2.sectors.industry_sector.Industry.get_product"]], "prog_product_amount() (industry method)": [[54, "endemo2.sectors.industry_sector.Industry.prog_product_amount"]], "endemo2.sectors.sector": [[55, "module-endemo2.sectors.sector"]], "sector (class in endemo2.sectors.sector)": [[56, "endemo2.sectors.sector.Sector"]], "sectoridentifier (class in endemo2.sectors.sector)": [[57, "endemo2.sectors.sector.SectorIdentifier"]], "endemo2.sectors.transport_sector": [[58, "module-endemo2.sectors.transport_sector"]], "transport (class in endemo2.sectors.transport_sector)": [[59, "endemo2.sectors.transport_sector.Transport"]], "endemo2.utility.prediction_models": [[61, "module-endemo2.utility.prediction_models"]], "coef (class in endemo2.utility.prediction_models)": [[62, "endemo2.utility.prediction_models.Coef"]], "exp (class in endemo2.utility.prediction_models)": [[63, "endemo2.utility.prediction_models.Exp"]], "__add__() (exp method)": [[63, "endemo2.utility.prediction_models.Exp.__add__"]], "__mul__() (exp method)": [[63, "endemo2.utility.prediction_models.Exp.__mul__"]], "count() (exp method)": [[63, "endemo2.utility.prediction_models.Exp.count"]], "index() (exp method)": [[63, "endemo2.utility.prediction_models.Exp.index"]], "r (exp attribute)": [[63, "endemo2.utility.prediction_models.Exp.r"]], "x0 (exp attribute)": [[63, "endemo2.utility.prediction_models.Exp.x0"]], "y0 (exp attribute)": [[63, "endemo2.utility.prediction_models.Exp.y0"]], "lin (class in endemo2.utility.prediction_models)": [[64, "endemo2.utility.prediction_models.Lin"]], "__add__() (lin method)": [[64, "endemo2.utility.prediction_models.Lin.__add__"]], "__mul__() (lin method)": [[64, "endemo2.utility.prediction_models.Lin.__mul__"]], "count() (lin method)": [[64, "endemo2.utility.prediction_models.Lin.count"]], "index() (lin method)": [[64, "endemo2.utility.prediction_models.Lin.index"]], "k0 (lin attribute)": [[64, "endemo2.utility.prediction_models.Lin.k0"]], "k1 (lin attribute)": [[64, "endemo2.utility.prediction_models.Lin.k1"]], "predictedtimeseries (class in endemo2.utility.prediction_models)": [[65, "endemo2.utility.prediction_models.PredictedTimeseries"]], "get_coef() (predictedtimeseries method)": [[65, "endemo2.utility.prediction_models.PredictedTimeseries.get_coef"]], "get_data() (predictedtimeseries method)": [[65, "endemo2.utility.prediction_models.PredictedTimeseries.get_data"]], "get_last_data_entry() (predictedtimeseries method)": [[65, "endemo2.utility.prediction_models.PredictedTimeseries.get_last_data_entry"]], "get_manual_prog() (predictedtimeseries method)": [[65, "endemo2.utility.prediction_models.PredictedTimeseries.get_manual_prog"]], "get_mean_y() (predictedtimeseries method)": [[65, "endemo2.utility.prediction_models.PredictedTimeseries.get_mean_y"]], "get_prediction_raw() (predictedtimeseries method)": [[65, "endemo2.utility.prediction_models.PredictedTimeseries.get_prediction_raw"]], "get_prog() (predictedtimeseries method)": [[65, "endemo2.utility.prediction_models.PredictedTimeseries.get_prog"]], "get_prog_exp() (predictedtimeseries method)": [[65, "endemo2.utility.prediction_models.PredictedTimeseries.get_prog_exp"]], "get_prog_lin() (predictedtimeseries method)": [[65, "endemo2.utility.prediction_models.PredictedTimeseries.get_prog_lin"]], "get_prog_quadr() (predictedtimeseries method)": [[65, "endemo2.utility.prediction_models.PredictedTimeseries.get_prog_quadr"]], "get_value() (predictedtimeseries method)": [[65, "endemo2.utility.prediction_models.PredictedTimeseries.get_value"]], "quadr (class in endemo2.utility.prediction_models)": [[66, "endemo2.utility.prediction_models.Quadr"]], "__add__() (quadr method)": [[66, "endemo2.utility.prediction_models.Quadr.__add__"]], "__mul__() (quadr method)": [[66, "endemo2.utility.prediction_models.Quadr.__mul__"]], "count() (quadr method)": [[66, "endemo2.utility.prediction_models.Quadr.count"]], "index() (quadr method)": [[66, "endemo2.utility.prediction_models.Quadr.index"]], "k0 (quadr attribute)": [[66, "endemo2.utility.prediction_models.Quadr.k0"]], "k1 (quadr attribute)": [[66, "endemo2.utility.prediction_models.Quadr.k1"]], "k2 (quadr attribute)": [[66, "endemo2.utility.prediction_models.Quadr.k2"]], "startpoint (class in endemo2.utility.prediction_models)": [[67, "endemo2.utility.prediction_models.StartPoint"]], "timestepsequence (class in endemo2.utility.prediction_models)": [[68, "endemo2.utility.prediction_models.TimeStepSequence"]], "get_coef() (timestepsequence method)": [[68, "endemo2.utility.prediction_models.TimeStepSequence.get_coef"]], "get_data() (timestepsequence method)": [[68, "endemo2.utility.prediction_models.TimeStepSequence.get_data"]], "get_historical_data_raw() (timestepsequence method)": [[68, "endemo2.utility.prediction_models.TimeStepSequence.get_historical_data_raw"]], "get_interval_change_rate_raw() (timestepsequence method)": [[68, "endemo2.utility.prediction_models.TimeStepSequence.get_interval_change_rate_raw"]], "get_last_data_entry() (timestepsequence method)": [[68, "endemo2.utility.prediction_models.TimeStepSequence.get_last_data_entry"]], "get_manual_prog() (timestepsequence method)": [[68, "endemo2.utility.prediction_models.TimeStepSequence.get_manual_prog"]], "get_mean_y() (timestepsequence method)": [[68, "endemo2.utility.prediction_models.TimeStepSequence.get_mean_y"]], "get_prog() (timestepsequence method)": [[68, "endemo2.utility.prediction_models.TimeStepSequence.get_prog"]], "get_prog_exp() (timestepsequence method)": [[68, "endemo2.utility.prediction_models.TimeStepSequence.get_prog_exp"]], "get_prog_lin() (timestepsequence method)": [[68, "endemo2.utility.prediction_models.TimeStepSequence.get_prog_lin"]], "get_prog_quadr() (timestepsequence method)": [[68, "endemo2.utility.prediction_models.TimeStepSequence.get_prog_quadr"]], "get_value() (timestepsequence method)": [[68, "endemo2.utility.prediction_models.TimeStepSequence.get_value"]], "timeseries (class in endemo2.utility.prediction_models)": [[69, "endemo2.utility.prediction_models.Timeseries"]], "get_coef() (timeseries method)": [[69, "endemo2.utility.prediction_models.Timeseries.get_coef"]], "get_data() (timeseries method)": [[69, "endemo2.utility.prediction_models.Timeseries.get_data"]], "get_last_data_entry() (timeseries method)": [[69, "endemo2.utility.prediction_models.Timeseries.get_last_data_entry"]], "get_mean_y() (timeseries method)": [[69, "endemo2.utility.prediction_models.Timeseries.get_mean_y"]], "get_prog() (timeseries method)": [[69, "endemo2.utility.prediction_models.Timeseries.get_prog"]], "get_prog_exp() (timeseries method)": [[69, "endemo2.utility.prediction_models.Timeseries.get_prog_exp"]], "get_prog_lin() (timeseries method)": [[69, "endemo2.utility.prediction_models.Timeseries.get_prog_lin"]], "get_prog_quadr() (timeseries method)": [[69, "endemo2.utility.prediction_models.Timeseries.get_prog_quadr"]], "get_value() (timeseries method)": [[69, "endemo2.utility.prediction_models.Timeseries.get_value"]]}})